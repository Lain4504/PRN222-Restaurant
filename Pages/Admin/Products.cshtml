@page "/admin/products"
@model PRN222_Restaurant.Pages.Admin.ProductsModel
@{
    ViewData["Title"] = "Quản lý sản phẩm";
}

<div class="card bg-base-100 shadow-md">
    <div class="card-body">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
            <h2 class="card-title text-2xl mb-2 md:mb-0">Quản lý sản phẩm</h2>
            <div class="flex mt-2 md:mt-0">
                <a href="/admin/products/createcate" class="btn btn-secondary mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Thêm danh mục
                </a>

                <a href="/admin/products/create" class="btn btn-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Thêm sản phẩm
                </a>
            </div>
        </div>


        <!-- Search and filters -->
        <div class="mb-6 grid grid-cols-1 lg:grid-cols-4 gap-4">
            <div class="lg:col-span-2">
                <div class="join w-full">
                    <input type="text" id="searchInput" data-search-table="productsTable" placeholder="Tìm kiếm sản phẩm..." class="input input-bordered join-item w-full" />
                    <button class="btn join-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </button>
                </div>
            </div>

            <div>
                <select class="select select-bordered w-full" id="categoryFilter">
                    <option value="">Tất cả danh mục</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Name">@category.Name</option>
                    }
                </select>
            </div>

            <div>
                <select class="select select-bordered w-full" id="statusFilter">
                    <option value="">Tất cả trạng thái</option>
                    @foreach (var status in Model.Statuses)
                    {
                        <option value="@status">@status</option>
                    }
                </select>
            </div>

        </div>

        <!-- Loading skeleton (hidden when data is loaded) -->
        <div id="loading-skeleton" class="@(Model.Products.Any() ? "hidden" : "")">
            @for (int i = 0; i < 5; i++)
            {
                <div class="h-20 bg-base-200 animate-pulse rounded-md mb-2"></div>
            }
        </div>

        <!-- Products table -->
        <div class="overflow-x-auto" id="products-table-container" class="@(!Model.Products.Any() ? "hidden" : "")">
            <table id="productsTable" class="table table-zebra w-full">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Ảnh</th>
                        <th>Tên sản phẩm</th>
                        <th>Danh mục</th>
                        <th>Giá</th>
                        <th>Trạng thái</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Model.Products)
                    {
                        <tr>
                            <td>@product.Id</td>
                            <td>
                                <div class="avatar">
                                    <div class="mask mask-squircle w-12 h-12">
                                        <img src="@product.ImageUrl" alt="@product.Name" />
                                    </div>
                                </div>
                            </td>
                            <td class="font-medium">@product.Name</td>
                            <td>@product.Category.Name</td>
                            <td>@product.Price.ToString("N0") đ</td>
                            <td>
                                @if (product.Status == Models.MenuItemStatus.Available)
                                {
                                    <span class="badge badge-success">@product.Status</span>
                                }
                                else if (product.Status == Models.MenuItemStatus.Unavailable)
                                {
                                    <span class="badge badge-warning">@product.Status</span>
                                }
                            </td>
                            <td>
                                <div class="flex gap-1">
                                    <a href="/admin/products/edit/@product.Id" class="btn btn-xs btn-square btn-warning">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                        </svg>
                                    </a>
                                    <button onclick="confirmDelete(@product.Id, '@product.Name')" class="btn btn-xs btn-square btn-error">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="mt-4 flex justify-between items-center flex-wrap">
            <div class="text-sm text-gray-500 mb-2 md:mb-0">
                Showing <span class="font-medium">@Model.FromRecord</span> to <span class="font-medium">@Model.ToRecord</span> of <span class="font-medium">@Model.TotalProducts</span> entries
            </div>

            <div class="join">
        <button class="join-item btn btn-sm @(Model.CurrentPage == 1 ? "btn-disabled" : "")" onclick="changePage(@(Model.CurrentPage - 1))">«</button>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <button class="join-item btn btn-sm @(Model.CurrentPage == i ? "btn-active" : "")" onclick="changePage(@i)">@i</button>
        }
        <button class="join-item btn btn-sm @(Model.CurrentPage == Model.TotalPages ? "btn-disabled" : "")" onclick="changePage(@(Model.CurrentPage + 1))">»</button>
    </div>
        </div>
    </div>
</div>

<!-- Delete confirmation modal -->
<dialog id="delete-modal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">Xác nhận xoá</h3>
        <p class="py-4">Bạn có chắc chắn muốn xóa sản phẩm <span id="delete-product-name" class="font-bold"></span>?</p>
        <div class="modal-action">
            <form method="post">
                <input type="hidden" id="delete-product-id" name="productId" value="" />
                <button class="btn btn-error" type="submit" asp-page-handler="Delete">Xóa</button>
                <button class="btn btn-ghost" type="button" onclick="closeDeleteModal()">Hủy</button>
            </form>
        </div>
    </div>
</dialog>

@section Scripts {
    <script>
        // Show toast notification if exists
        document.addEventListener('DOMContentLoaded', function () {
        @if (!string.IsNullOrEmpty(Model.SuccessMessage))
        {
            <text>showToast('@Model.SuccessMessage', 'success'); </text>
        }

                // Hide loading skeleton and show table
                setTimeout(() => {
                    document.getElementById('loading-skeleton').classList.add('hidden');
                    document.getElementById('products-table-container').classList.remove('hidden');
                }, 500);

            // Setup filters
            setupFilters();
        });

        // Confirmation modal functions
        function confirmDelete(productId, productName) {
            document.getElementById('delete-product-id').value = productId;
            document.getElementById('delete-product-name').textContent = productName;
            document.getElementById('delete-modal').showModal();
        }

        function closeDeleteModal() {
            document.getElementById('delete-modal').close();
        }
        // Pagination function
        function changePage(page) {
            window.location.href = '/admin/products?page=' + page;
        }

        // Setup filter functions
        function setupFilters() {
            const categoryFilter = document.getElementById('categoryFilter');
            const statusFilter = document.getElementById('statusFilter');
            const table = document.getElementById('productsTable');

            if (!categoryFilter || !statusFilter || !table) return;

            const filterTable = () => {
                const categoryValue = categoryFilter.value.toLowerCase();
                const statusValue = statusFilter.value.toLowerCase();
                const rows = table.querySelectorAll('tbody tr');

                rows.forEach(row => {
                    const category = row.cells[3].textContent.toLowerCase();
                    const status = row.cells[5].textContent.toLowerCase();

                    const categoryMatch = !categoryValue || category === categoryValue;
                    const statusMatch = !statusValue || status.includes(statusValue);

                    if (categoryMatch && statusMatch) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            };

            categoryFilter.addEventListener('change', filterTable);
            statusFilter.addEventListener('change', filterTable);
        }
    </script>
}