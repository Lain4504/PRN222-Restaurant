@page "/admin/orders"
@model PRN222_Restaurant.Pages.Admin.OrdersModel
@using PRN222_Restaurant.Models
@{
    ViewData["Title"] = "Qu·∫£n l√Ω ƒë∆°n h√†ng";
}

<div class="flex flex-col space-y-6">
    <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold">Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>
        <button class="btn btn-primary" onclick="document.getElementById('create-order-modal').showModal()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            T·∫°o ƒë∆°n h√†ng m·ªõi
        </button>
    </div>

    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        <div class="alert @(Model.StatusMessage.StartsWith("Error") ? "alert-error" : "alert-success") shadow-lg mb-4">
            <div>
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>@Model.StatusMessage</span>
            </div>
        </div>
    }

    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table w-full">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Lo·∫°i ƒë∆°n</th>
                            <th>Kh√°ch h√†ng</th>
                            <th>B√†n</th>
                            <th>Ng√†y ƒë·∫∑t</th>
                            <th>Th·ªùi gian ƒë·∫∑t b√†n</th>
                            <th>T·ªïng ti·ªÅn</th>
                            <th>Points</th>
                            <th>Thanh to√°n</th>
                            <th>Tr·∫°ng th√°i</th>
                            <th>Thao t√°c</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model.Orders)
                        {
                            <tr class="order-row" data-id="@order.Id" style="cursor:pointer">
                                <td>@order.Id</td>
                                <td>
                                    <span class="badge @(order.OrderType == "Immediate" ? "badge-info" : "badge-warning")">
                                        @(order.OrderType == "Immediate" ? "T·∫°i ch·ªó" : "ƒê·∫∑t tr∆∞·ªõc")
                                    </span>
                                </td>
                                <td>@(order.User != null ? order.User.FullName : "Kh√°ch v√£ng lai")</td>
                                <td>@(order.Table != null ? $"B√†n {order.Table.TableNumber}" : "N/A")</td>
                                <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>@(order.ReservationTime.HasValue ? order.ReservationTime.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</td>
                                <td>
                                    @if (order.PointsUsed.HasValue && order.PointsUsed.Value > 0)
                                    {
                                        var pointsDiscount = order.PointsUsed.Value * 5000; // 1 point = 5,000 VND
                                        var originalPrice = order.TotalPrice + pointsDiscount;
                                        <div class="text-xs text-gray-500 line-through">@originalPrice.ToString("N0") VNƒê</div>
                                        <div class="font-medium text-green-600">@order.TotalPrice.ToString("N0") VNƒê</div>
                                        <div class="text-xs text-blue-500">-@pointsDiscount.ToString("N0") VNƒê (Points)</div>
                                    }
                                    else
                                    {
                                        <div class="font-medium">@order.TotalPrice.ToString("N0") VNƒê</div>
                                    }
                                </td>
                                <td>
                                    @if (order.PointsUsed.HasValue && order.PointsUsed.Value > 0)
                                    {
                                        <span class="badge badge-info">@order.PointsUsed.Value points</span>
                                        <div class="text-xs text-gray-500">-@((order.PointsUsed.Value * 5000).ToString("N0")) VNƒê</div>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">Kh√¥ng s·ª≠ d·ª•ng</span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var payments = order.Payments ?? new List<Payment>();
                                        var totalPaid = payments.Sum(p => p.Amount);
                                        var depositPaid = payments.Where(p => p.PaymentType == "Deposit").Sum(p => p.Amount);
                                        var fullPayment = payments.Any(p => p.PaymentType == "Full");
                                        var remainingAmount = order.TotalPrice - totalPaid;
                                    }

                                    @if (fullPayment || totalPaid >= order.TotalPrice)
                                    {
                                        <span class="badge badge-success">ƒê√£ thanh to√°n ƒë·ªß</span>
                                        <div class="text-xs text-gray-500">@totalPaid.ToString("N0") VNƒê</div>
                                    }
                                    else if (depositPaid > 0)
                                    {
                                        <span class="badge badge-warning">ƒê√£ c·ªçc 20%</span>
                                        <div class="text-xs text-gray-500">ƒê√£ tr·∫£: @totalPaid.ToString("N0") VNƒê</div>
                                        <div class="text-xs text-red-500">C√≤n l·∫°i: @remainingAmount.ToString("N0") VNƒê</div>
                                    }
                                    else
                                    {
                                        <span class="badge badge-error">Ch∆∞a thanh to√°n</span>
                                        <div class="text-xs text-gray-500">@order.TotalPrice.ToString("N0") VNƒê</div>
                                    }
                                </td>
                                <td>
                                    <span class="badge
                                           @(order.Status == "Pending" ? "badge-warning" :
                                              order.Status == "Preparing" ? "badge-info" :
                                              order.Status == "Served" ? "badge-success" :
                                              order.Status == "Completed" ? "badge-success" :
                                              order.Status == "Paid" ? "badge-primary" :
                                              order.Status == "Paid Deposit" ? "badge-accent" :
                                              order.Status == "Cancelled" ? "badge-error" : "")">
                                        @(order.Status == "Paid Deposit" ? "ƒê√£ c·ªçc" : order.Status)
                                    </span>
                                </td>
                                <td>
                                    @{
                                        var orderPayments = order.Payments ?? new List<Payment>();
                                        var orderTotalPaid = orderPayments.Sum(p => p.Amount);
                                        var hasDepositOnly = orderPayments.Any(p => p.PaymentType == "Deposit") && orderTotalPaid < order.TotalPrice;
                                        var isFullyPaid = orderTotalPaid >= order.TotalPrice || orderPayments.Any(p => p.PaymentType == "Full");
                                    }

                                    <div class="flex gap-1 flex-wrap">
                                        <!-- Quick Status Actions -->
                                        @if (order.Status == "Pending")
                                        {
                                            <button class="btn btn-xs btn-info update-status" data-id="@order.Id" data-status="Preparing" title="B·∫Øt ƒë·∫ßu chu·∫©n b·ªã">
                                                üç≥
                                            </button>
                                        }
                                        else if (order.Status == "Preparing")
                                        {
                                            <button class="btn btn-xs btn-warning update-status" data-id="@order.Id" data-status="Served" title="ƒê√£ ph·ª•c v·ª•">
                                                üçΩÔ∏è
                                            </button>
                                        }

                                        <!-- Payment Actions -->
                                        @if (hasDepositOnly && (order.Status == "Paid Deposit" || order.Status == "Served"))
                                        {
                                            <button class="btn btn-xs btn-primary confirm-remaining-payment" data-id="@order.Id" title="X√°c nh·∫≠n thanh to√°n c√≤n l·∫°i">
                                                üí∞
                                            </button>
                                        }

                                        @if (isFullyPaid && (order.Status == "Paid" || order.Status == "Served"))
                                        {
                                            <button class="btn btn-xs btn-success complete-order" data-id="@order.Id" title="Ho√†n th√†nh ƒë∆°n h√†ng">
                                                ‚úÖ
                                            </button>
                                        }

                                        <!-- More Actions Dropdown -->
                                        <div class="dropdown dropdown-left">
                                            <div tabindex="0" role="button" class="btn btn-xs btn-ghost" title="Th√™m thao t√°c">‚ãØ</div>
                                            <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-40">
                                                @if (order.Status != "Cancelled")
                                                {
                                                    <li><a href="#" data-id="@order.Id" data-status="Cancelled" class="update-status text-error">‚ùå H·ªßy</a></li>
                                                }
                                                @if (order.Status == "Cancelled")
                                                {
                                                    <li><a href="#" data-id="@order.Id" data-status="Pending" class="update-status">üîÑ Kh√¥i ph·ª•c</a></li>
                                                }
                                                <li><hr class="my-1"></li>
                                                <li><a href="#" class="view-order-details" data-id="@order.Id">üëÅÔ∏è Chi ti·∫øt</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination controls -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-600">
                    Hi·ªÉn th·ªã @((Model.OrdersResult.Page - 1) * Model.OrdersResult.PageSize + 1) ƒë·∫øn 
                    @(Math.Min(Model.OrdersResult.Page * Model.OrdersResult.PageSize, Model.OrdersResult.TotalCount)) 
                    tr√™n t·ªïng s·ªë @Model.OrdersResult.TotalCount ƒë∆°n h√†ng
                </div>
                
                <div class="join">
                    @if (Model.OrdersResult.HasPreviousPage)
                    {
                        <a href="/admin/orders?currentPage=@(Model.OrdersResult.Page - 1)&pageSize=@Model.OrdersResult.PageSize" 
                           class="join-item btn btn-outline">¬´</a>
                    }
                    else
                    {
                        <button class="join-item btn btn-outline" disabled>¬´</button>
                    }
                    
                    @for (int i = Math.Max(1, Model.OrdersResult.Page - 2); i <= Math.Min(Model.OrdersResult.TotalPages, Math.Max(Model.OrdersResult.Page + 2, 5)); i++)
                    {
                        if (i == Model.OrdersResult.Page)
                        {
                            <button class="join-item btn btn-active">@i</button>
                        }
                        else
                        {
                            <a href="/admin/orders?currentPage=@i&pageSize=@Model.OrdersResult.PageSize" 
                               class="join-item btn btn-outline">@i</a>
                        }
                    }
                    
                    @if (Model.OrdersResult.HasNextPage)
                    {
                        <a href="/admin/orders?currentPage=@(Model.OrdersResult.Page + 1)&pageSize=@Model.OrdersResult.PageSize" 
                           class="join-item btn btn-outline">¬ª</a>
                    }
                    else
                    {
                        <button class="join-item btn btn-outline" disabled>¬ª</button>
                    }
                </div>
                
                <div class="flex items-center">
                    <span class="mr-2">Hi·ªÉn th·ªã:</span>
                    <select id="pageSize" class="select select-bordered select-sm w-auto max-w-xs">
                        @{
                            bool isSelected5 = Model.OrdersResult.PageSize == 5;
                            bool isSelected10 = Model.OrdersResult.PageSize == 10;
                            bool isSelected20 = Model.OrdersResult.PageSize == 20;
                            bool isSelected50 = Model.OrdersResult.PageSize == 50;
                        }
                        <option value="5" selected="@isSelected5">5</option>
                        <option value="10" selected="@isSelected10">10</option>
                        <option value="20" selected="@isSelected20">20</option>
                        <option value="50" selected="@isSelected50">50</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal t·∫°o ƒë∆°n h√†ng m·ªõi -->
<dialog id="create-order-modal" class="modal">
    <div class="modal-box w-11/12 max-w-5xl">
        <h3 class="font-bold text-lg mb-4">T·∫°o ƒë∆°n h√†ng m·ªõi</h3>

        @if (!string.IsNullOrEmpty(Model.StatusMessage) && Model.StatusMessage.StartsWith("Error"))
        {
            <div class="alert alert-error mb-4">
                <div>
                    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>@Model.StatusMessage</span>
                </div>
            </div>
        }
        
        <form id="create-order-form" method="post" asp-page-handler="CreateOrder">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Ch·ªçn b√†n</span>
                    </label>
                    <select class="select select-bordered w-full" asp-for="CreateOrderModel.TableId" required>
                        <option value="">Ch·ªçn b√†n...</option>
                        @foreach (var table in Model.AvailableTables)
                        {
                            <option value="@table.Id">B√†n @table.TableNumber</option>
                        }
                    </select>
                    <span asp-validation-for="CreateOrderModel.TableId" class="text-error"></span>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Ghi ch√∫</span>
                    </label>
                    <textarea class="textarea textarea-bordered" asp-for="CreateOrderModel.Note" placeholder="Nh·∫≠p ghi ch√∫..."></textarea>
                </div>
            </div>

            <div class="overflow-x-auto mb-6">
                <table class="table w-full">
                    <thead>
                        <tr>
                            <th>T√™n m√≥n</th>
                            <th>Danh m·ª•c</th>
                            <th>Gi√°</th>
                            <th>S·ªë l∆∞·ª£ng</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.MenuItems)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Category.Name</td>
                                <td>@item.Price.ToString("N0") ƒë</td>
                                <td>
                                    <div class="flex items-center gap-2">
                                        <button type="button" class="btn btn-circle btn-sm" onclick="decrementQuantity(@item.Id)">-</button>
                                        <input type="number" class="input input-bordered w-20 text-center" 
                                               id="quantity-@item.Id" value="0" min="0"
                                               onchange="updateQuantity(@item.Id, this.value)" />
                                        <button type="button" class="btn btn-circle btn-sm" onclick="incrementQuantity(@item.Id)">+</button>
                                        <input type="hidden" name="CreateOrderModel.SelectedItems.Index" value="@item.Id" />
                                        <input type="hidden" name="CreateOrderModel.SelectedItems[@item.Id].MenuItemId" value="@item.Id" />
                                        <input type="hidden" name="CreateOrderModel.SelectedItems[@item.Id].Quantity" value="0" id="hidden-quantity-@item.Id" />
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="modal-action">
                <button type="submit" class="btn btn-primary">T·∫°o ƒë∆°n h√†ng</button>
                <button type="button" class="btn" onclick="document.getElementById('create-order-modal').close()">H·ªßy</button>
            </div>
        </form>
    </div>
</dialog>

<!-- Modal xem chi ti·∫øt ƒë∆°n h√†ng -->
<dialog id="order-details-modal" class="modal">
    <div class="modal-box w-11/12 max-w-5xl">
        <h3 class="font-bold text-lg mb-4">Chi ti·∫øt ƒë∆°n h√†ng #<span id="order-id"></span></h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
                <h4 class="font-medium text-sm text-gray-500">Lo·∫°i ƒë∆°n h√†ng</h4>
                <p id="order-type" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">Tr·∫°ng th√°i</h4>
                <p id="order-status" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">Kh√°ch h√†ng</h4>
                <p id="order-customer" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">B√†n</h4>
                <p id="order-table" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">Ng√†y ƒë·∫∑t</h4>
                <p id="order-date" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">Th·ªùi gian ƒë·∫∑t b√†n</h4>
                <p id="order-reservation-time" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">S·ªë l∆∞·ª£ng kh√°ch</h4>
                <p id="order-guests" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">Ghi ch√∫</h4>
                <p id="order-note" class="text-lg"></p>
            </div>
            <div>
                <h4 class="font-medium text-sm text-gray-500">Points s·ª≠ d·ª•ng</h4>
                <p id="order-points" class="text-lg"></p>
            </div>
        </div>
        
        <h4 class="font-medium text-lg mb-2">Danh s√°ch m√≥n</h4>
        <div class="overflow-x-auto mb-6">
            <table class="table w-full">
                <thead>
                    <tr>
                        <th>T√™n m√≥n</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>ƒê∆°n gi√°</th>
                        <th>Th√†nh ti·ªÅn</th>
                    </tr>
                </thead>
                <tbody id="order-items">
                    <!-- Items will be loaded here -->
                </tbody>
                <tfoot id="order-total-section">
                    <!-- Total will be populated by JavaScript -->
                </tfoot>
            </table>
        </div>
        
        <div class="modal-action">
            <form method="dialog">
                <button class="btn">ƒê√≥ng</button>
            </form>
        </div>
    </div>
</dialog>

<!-- Form ·∫©n ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i -->
<form id="update-status-form" method="post" asp-page-handler="UpdateStatus">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="OrderId" id="status-order-id" />
    <input type="hidden" asp-for="OrderStatus" id="status-value" />
    <input type="hidden" asp-for="CurrentPage" id="current-page" value="@Model.CurrentPage" />
    <input type="hidden" asp-for="PageSize" id="page-size" value="@Model.PageSize" />
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i
            document.querySelectorAll('.update-status').forEach(function(button) {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation(); // NgƒÉn event bubbling

                    const orderId = this.getAttribute('data-id');
                    const status = this.getAttribute('data-status');

                    console.log('Updating order:', orderId, 'to status:', status); // Debug log

                    document.getElementById('status-order-id').value = orderId;
                    document.getElementById('status-value').value = status;
                    document.getElementById('update-status-form').submit();
                });
            });
            // X·ª≠ l√Ω xem chi ti·∫øt ƒë∆°n h√†ng
            document.querySelectorAll('.view-order-details').forEach(function(link) {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const orderId = this.getAttribute('data-id');
                    const modal = document.getElementById('order-details-modal');
                    // Fetch order details
                    fetch(`/admin/orders?handler=OrderDetails&id=${orderId}`)
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('order-id').textContent = data.id;
                            document.getElementById('order-type').textContent = data.orderType === 'Immediate' ? 'T·∫°i ch·ªó' : 'ƒê·∫∑t tr∆∞·ªõc';
                            document.getElementById('order-status').textContent = data.status;
                            document.getElementById('order-customer').textContent = data.customer;
                            document.getElementById('order-table').textContent = data.table ? `B√†n ${data.table}` : 'N/A';
                            document.getElementById('order-date').textContent = new Date(data.orderDate).toLocaleString('vi-VN');
                            document.getElementById('order-reservation-time').textContent = data.reservationTime ? new Date(data.reservationTime).toLocaleString('vi-VN') : 'N/A';
                            document.getElementById('order-guests').textContent = data.numberOfGuests || 'N/A';
                            document.getElementById('order-note').textContent = data.note || 'N/A';

                            // Display points information
                            const pointsElement = document.getElementById('order-points');
                            if (data.pointsUsed && data.pointsUsed > 0) {
                                const pointsDiscount = data.pointsUsed * 5000;
                                pointsElement.innerHTML = `<span class="badge badge-info">${data.pointsUsed} points</span> <span class="text-green-600">(-${pointsDiscount.toLocaleString('vi-VN')} VNƒê)</span>`;
                            } else {
                                pointsElement.textContent = 'Kh√¥ng s·ª≠ d·ª•ng';
                            }
                            // Update order items
                            const itemsContainer = document.getElementById('order-items');
                            itemsContainer.innerHTML = '';
                            data.items.forEach(item => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>${item.name}</td>
                                    <td>${item.quantity}</td>
                                    <td>${item.unitPrice.toLocaleString('vi-VN')} VNƒê</td>
                                    <td>${item.total.toLocaleString('vi-VN')} VNƒê</td>
                                `;
                                itemsContainer.appendChild(row);
                            });

                            // Update total section with points information
                            const totalSection = document.getElementById('order-total-section');
                            if (data.pointsUsed && data.pointsUsed > 0) {
                                const pointsDiscount = data.pointsUsed * 5000;
                                const originalPrice = data.totalPrice + pointsDiscount;
                                totalSection.innerHTML = `
                                    <tr>
                                        <td colspan="3" class="text-right">T·ªïng ti·ªÅn g·ªëc:</td>
                                        <td class="line-through text-gray-500">${originalPrice.toLocaleString('vi-VN')} VNƒê</td>
                                    </tr>
                                    <tr>
                                        <td colspan="3" class="text-right text-blue-600">Gi·∫£m gi√° (${data.pointsUsed} points):</td>
                                        <td class="text-blue-600">-${pointsDiscount.toLocaleString('vi-VN')} VNƒê</td>
                                    </tr>
                                    <tr>
                                        <td colspan="3" class="text-right font-bold text-green-600">Th√†nh ti·ªÅn:</td>
                                        <td class="font-bold text-green-600">${data.totalPrice.toLocaleString('vi-VN')} VNƒê</td>
                                    </tr>
                                `;
                            } else {
                                totalSection.innerHTML = `
                                    <tr>
                                        <td colspan="3" class="text-right font-bold">T·ªïng c·ªông:</td>
                                        <td class="font-bold">${data.totalPrice.toLocaleString('vi-VN')} VNƒê</td>
                                    </tr>
                                `;
                            }

                            modal.showModal();
                        });
                });
            });

            // X·ª≠ l√Ω n√∫t x√°c nh·∫≠n thanh to√°n c√≤n l·∫°i
            document.querySelectorAll('.confirm-remaining-payment').forEach(function(button) {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation(); // NgƒÉn event bubbling
                    const orderId = this.getAttribute('data-id');

                    if (confirm('X√°c nh·∫≠n kh√°ch h√†ng ƒë√£ thanh to√°n ph·∫ßn c√≤n l·∫°i t·∫°i qu·∫ßy?')) {
                        // Create form and submit
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/admin/orders?handler=ConfirmRemainingPayment';

                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'id';
                        input.value = orderId;
                        form.appendChild(input);

                        // Add anti-forgery token
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = token;
                        form.appendChild(tokenInput);

                        document.body.appendChild(form);
                        form.submit();
                    }
                });
            });

            // X·ª≠ l√Ω n√∫t ho√†n th√†nh order
            document.querySelectorAll('.complete-order').forEach(function(button) {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation(); // NgƒÉn event bubbling
                    const orderId = this.getAttribute('data-id');

                    if (confirm('X√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng n√†y?')) {
                        // Create form and submit
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/admin/orders?handler=CompleteOrder';

                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'id';
                        input.value = orderId;
                        form.appendChild(input);

                        // Add anti-forgery token
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = token;
                        form.appendChild(tokenInput);

                        document.body.appendChild(form);
                        form.submit();
                    }
                });
            });

            // Click v√†o d√≤ng order ƒë·ªÉ chuy·ªÉn sang trang chi ti·∫øt
            document.querySelectorAll('.order-row').forEach(function(row) {
                row.addEventListener('click', function(e) {
                    // N·∫øu click v√†o button ho·∫∑c dropdown th√¨ kh√¥ng chuy·ªÉn trang
                    if (e.target.closest('button') || e.target.closest('.dropdown')) return;
                    const orderId = this.getAttribute('data-id');
                    window.location.href = `/admin/order-detail/${orderId}`;
                });
            });
            // X·ª≠ l√Ω thay ƒë·ªïi s·ªë m·ª•c tr√™n m·ªói trang
            document.getElementById('pageSize').addEventListener('change', function() {
                window.location.href = '/admin/orders?currentPage=1&pageSize=' + this.value;
            });
            // Show modal if there are errors
            if (@(!string.IsNullOrEmpty(Model.StatusMessage) && Model.StatusMessage.StartsWith("Error")).ToString().ToLower()) {
                document.getElementById('create-order-modal').showModal();
            }
        });
        // Functions for create order modal
        function incrementQuantity(itemId) {
            const input = document.getElementById(`quantity-${itemId}`);
            input.value = parseInt(input.value) + 1;
            updateQuantity(itemId, input.value);
        }
        function decrementQuantity(itemId) {
            const input = document.getElementById(`quantity-${itemId}`);
            if (parseInt(input.value) > 0) {
                input.value = parseInt(input.value) - 1;
                updateQuantity(itemId, input.value);
            }
        }
        function updateQuantity(itemId, value) {
            const quantity = parseInt(value) || 0;
            const input = document.getElementById(`quantity-${itemId}`);
            input.value = Math.max(0, quantity);
            // Update hidden input for quantity
            document.getElementById(`hidden-quantity-${itemId}`).value = quantity;
        }
    </script>
}