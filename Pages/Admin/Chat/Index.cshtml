@page
@model PRN222_Restaurant.Pages.Admin.Chat.IndexModel
@{
    ViewData["Title"] = "Chat Management";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container-fluid h-screen flex">
    <!-- Chat Rooms Sidebar -->
    <div class="w-1/3 bg-white border-r border-gray-200 flex flex-col">
        <div class="p-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-900">Chat Rooms</h2>
                <div class="flex items-center space-x-2">
                    <span class="text-sm text-gray-500" id="activeChatCount">0 active</span>
                    <button id="refreshButton" class="p-2 text-gray-400 hover:text-gray-600">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
            <div class="mt-2">
                <div class="flex items-center space-x-2 text-sm">
                    <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span class="text-gray-600" id="onlineStatus">Online</span>
                </div>
            </div>
        </div>

        <!-- Chat Rooms List -->
        <div class="flex-1 overflow-y-auto" id="chatRoomsList">
            <div class="p-4 text-center text-gray-500">
                <i class="fas fa-comments text-3xl mb-2"></i>
                <p>No active chat rooms</p>
            </div>
        </div>
    </div>

    <!-- Chat Area -->
    <div class="flex-1 flex flex-col">
        <!-- Chat Header -->
        <div class="bg-white border-b border-gray-200 p-4" id="chatHeader" style="display: none;">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                        <i class="fas fa-user text-white"></i>
                    </div>
                    <div>
                        <h3 class="font-semibold text-gray-900" id="customerName">Customer Name</h3>
                        <p class="text-sm text-gray-500" id="chatStatus">Active</p>
                    </div>
                </div>
                <div class="flex items-center space-x-2">
                    <button id="assignToMeButton" class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600">
                        Assign to Me
                    </button>
                    <button id="closeChatButton" class="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600">
                        Close Chat
                    </button>
                </div>
            </div>
        </div>

        <!-- No Chat Selected -->
        <div class="flex-1 flex items-center justify-center bg-gray-50" id="noChatSelected">
            <div class="text-center text-gray-500">
                <i class="fas fa-comments text-6xl mb-4"></i>
                <h3 class="text-xl font-semibold mb-2">Select a chat to start</h3>
                <p>Choose a chat room from the sidebar to begin messaging</p>
            </div>
        </div>

        <!-- Chat Messages Area -->
        <div class="flex-1 flex flex-col" id="chatArea" style="display: none;">
            <div class="flex-1 overflow-y-auto p-4 space-y-4" id="messagesContainer">
                <!-- Messages will be loaded here -->
            </div>

            <!-- Typing Indicator -->
            <div class="px-4 py-2" id="typingIndicator" style="display: none;">
                <div class="flex items-center space-x-2 text-gray-500">
                    <div class="flex space-x-1">
                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s;"></div>
                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s;"></div>
                    </div>
                    <span class="text-sm">Customer is typing...</span>
                </div>
            </div>

            <!-- Message Input -->
            <div class="border-t bg-white p-4">
                <div class="flex items-center space-x-3">
                    <div class="flex-1">
                        <input type="text" 
                               id="messageInput" 
                               placeholder="Type your message..." 
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               maxlength="1000">
                    </div>
                    <button id="sendButton" 
                            class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled>
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Notification Sound -->
<audio id="notificationSound" preload="auto">
    <source src="/sounds/notification.mp3" type="audio/mpeg">
    <source src="/sounds/notification.wav" type="audio/wav">
</audio>

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        class StaffChat {
            constructor() {
                this.connection = null;
                this.currentChatRoomId = null;
                this.userId = @Model.UserId;
                this.userRole = '@Model.UserRole';
                this.chatRooms = new Map();
                this.isTyping = false;
                this.typingTimeout = null;
                this.init();
            }

            async init() {
                await this.setupSignalR();
                this.setupEventListeners();
                await this.loadChatRooms();
            }

            async setupSignalR() {
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .build();

                // Connection events
                this.connection.onreconnected(async () => {
                    await this.loadChatRooms();
                    if (this.currentChatRoomId) {
                        await this.connection.invoke("JoinChatRoom", this.currentChatRoomId);
                    }
                });

                // Message events
                this.connection.on("ReceiveMessage", (message) => {
                    this.handleNewMessage(message);
                });

                this.connection.on("NewCustomerMessage", (data) => {
                    this.handleNewCustomerMessage(data);
                });

                this.connection.on("UserTyping", (userId, isTyping) => {
                    if (userId !== this.userId) {
                        this.showTypingIndicator(isTyping);
                    }
                });

                this.connection.on("AssignedToChat", (chatRoomId) => {
                    this.handleChatAssignment(chatRoomId);
                });

                await this.connection.start();
            }

            setupEventListeners() {
                const messageInput = document.getElementById('messageInput');
                const sendButton = document.getElementById('sendButton');

                messageInput.addEventListener('input', (e) => {
                    const message = e.target.value.trim();
                    sendButton.disabled = !message;
                    
                    if (message && !this.isTyping) {
                        this.isTyping = true;
                        this.connection.invoke("StartTyping", this.currentChatRoomId);
                    }
                    
                    clearTimeout(this.typingTimeout);
                    this.typingTimeout = setTimeout(() => {
                        if (this.isTyping) {
                            this.isTyping = false;
                            this.connection.invoke("StopTyping", this.currentChatRoomId);
                        }
                    }, 1000);
                });

                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.sendMessage();
                    }
                });

                sendButton.addEventListener('click', () => {
                    this.sendMessage();
                });

                document.getElementById('refreshButton').addEventListener('click', () => {
                    this.loadChatRooms();
                });

                document.getElementById('assignToMeButton').addEventListener('click', () => {
                    this.assignChatToMe();
                });

                document.getElementById('closeChatButton').addEventListener('click', () => {
                    this.closeChat();
                });
            }

            async loadChatRooms() {
                try {
                    const response = await fetch('/Admin/Chat?handler=GetChatRooms');
                    if (response.ok) {
                        const chatRooms = await response.json();
                        this.renderChatRooms(chatRooms);
                        document.getElementById('activeChatCount').textContent = `${chatRooms.length} active`;
                    }
                } catch (error) {
                    console.error("Error loading chat rooms:", error);
                }
            }

            renderChatRooms(chatRooms) {
                const container = document.getElementById('chatRoomsList');
                
                if (chatRooms.length === 0) {
                    container.innerHTML = `
                        <div class="p-4 text-center text-gray-500">
                            <i class="fas fa-comments text-3xl mb-2"></i>
                            <p>No active chat rooms</p>
                        </div>
                    `;
                    return;
                }

                container.innerHTML = chatRooms.map(room => `
                    <div class="chat-room-item p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${room.id === this.currentChatRoomId ? 'bg-blue-50 border-l-4 border-l-blue-500' : ''}"
                         data-room-id="${room.id}">
                        <div class="flex items-center justify-between">
                            <div class="flex-1">
                                <div class="flex items-center space-x-2">
                                    <h4 class="font-medium text-gray-900">${room.customer?.fullName || 'Unknown Customer'}</h4>
                                    ${room.staffId ? `<span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">Assigned</span>` : `<span class="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">Unassigned</span>`}
                                </div>
                                <p class="text-sm text-gray-500 truncate">${room.lastMessage || 'No messages yet'}</p>
                                <div class="flex items-center justify-between mt-1">
                                    <span class="text-xs text-gray-400">${this.formatTime(room.lastMessageAt)}</span>
                                    ${room.unreadCount > 0 ? `<span class="bg-red-500 text-white text-xs rounded-full px-2 py-1">${room.unreadCount}</span>` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');

                // Add click listeners
                container.querySelectorAll('.chat-room-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const roomId = parseInt(item.dataset.roomId);
                        this.selectChatRoom(roomId);
                    });
                });

                // Store chat rooms data
                chatRooms.forEach(room => {
                    this.chatRooms.set(room.id, room);
                });
            }

            async selectChatRoom(roomId) {
                if (this.currentChatRoomId) {
                    await this.connection.invoke("LeaveChatRoom", this.currentChatRoomId);
                }

                this.currentChatRoomId = roomId;
                const room = this.chatRooms.get(roomId);

                // Update UI
                document.getElementById('noChatSelected').style.display = 'none';
                document.getElementById('chatArea').style.display = 'flex';
                document.getElementById('chatHeader').style.display = 'block';
                
                document.getElementById('customerName').textContent = room.customer?.fullName || 'Unknown Customer';
                document.getElementById('chatStatus').textContent = room.status;

                // Update assign button
                const assignButton = document.getElementById('assignToMeButton');
                if (room.staffId === this.userId) {
                    assignButton.textContent = 'Assigned to You';
                    assignButton.disabled = true;
                } else if (room.staffId) {
                    assignButton.textContent = 'Reassign to Me';
                    assignButton.disabled = false;
                } else {
                    assignButton.textContent = 'Assign to Me';
                    assignButton.disabled = false;
                }

                // Join room and load messages
                await this.connection.invoke("JoinChatRoom", roomId);
                await this.loadMessages(roomId);
                
                // Update sidebar selection
                document.querySelectorAll('.chat-room-item').forEach(item => {
                    item.classList.remove('bg-blue-50', 'border-l-4', 'border-l-blue-500');
                });
                document.querySelector(`[data-room-id="${roomId}"]`).classList.add('bg-blue-50', 'border-l-4', 'border-l-blue-500');
            }

            async loadMessages(roomId) {
                try {
                    const response = await fetch(`/Admin/Chat?handler=GetMessages&chatRoomId=${roomId}`);
                    if (response.ok) {
                        const messages = await response.json();
                        const container = document.getElementById('messagesContainer');
                        container.innerHTML = '';
                        
                        messages.forEach(message => {
                            this.displayMessage(message, false);
                        });
                        
                        this.scrollToBottom();
                    }
                } catch (error) {
                    console.error("Error loading messages:", error);
                }
            }

            sendMessage() {
                const messageInput = document.getElementById('messageInput');
                const message = messageInput.value.trim();
                
                if (!message || !this.currentChatRoomId) return;

                this.connection.invoke("SendMessage", this.currentChatRoomId, message);
                messageInput.value = '';
                document.getElementById('sendButton').disabled = true;
            }

            displayMessage(message, animate = true) {
                const container = document.getElementById('messagesContainer');
                const isOwnMessage = message.senderId === this.userId;
                const isSystemMessage = message.messageType === 'System';
                
                const messageDiv = document.createElement('div');
                messageDiv.className = `flex ${isOwnMessage ? 'justify-end' : 'justify-start'} ${animate ? 'opacity-0' : ''}`;
                
                if (isSystemMessage) {
                    messageDiv.innerHTML = `
                        <div class="text-center text-gray-500 text-sm py-2">
                            <i class="fas fa-info-circle mr-1"></i>
                            ${message.content}
                        </div>
                    `;
                } else {
                    messageDiv.innerHTML = `
                        <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            isOwnMessage 
                                ? 'bg-blue-500 text-white' 
                                : 'bg-gray-200 text-gray-900'
                        }">
                            <div class="text-sm font-medium mb-1">${message.senderName}</div>
                            <div class="text-sm">${this.escapeHtml(message.content)}</div>
                            <div class="text-xs mt-1 ${isOwnMessage ? 'text-blue-100' : 'text-gray-500'}">
                                ${new Date(message.sentAt).toLocaleTimeString()}
                            </div>
                        </div>
                    `;
                }
                
                container.appendChild(messageDiv);
                
                if (animate) {
                    setTimeout(() => {
                        messageDiv.classList.remove('opacity-0');
                        messageDiv.classList.add('opacity-100', 'transition-opacity', 'duration-300');
                    }, 50);
                }
                
                this.scrollToBottom();
            }

            handleNewMessage(message) {
                if (message.chatRoomId === this.currentChatRoomId) {
                    this.displayMessage(message);
                } else {
                    // Update unread count in sidebar
                    this.playNotificationSound();
                }
                this.loadChatRooms(); // Refresh sidebar
            }

            handleNewCustomerMessage(data) {
                this.playNotificationSound();
                this.loadChatRooms();
            }

            async assignChatToMe() {
                if (!this.currentChatRoomId) return;
                
                try {
                    await this.connection.invoke("AssignStaffToChat", this.currentChatRoomId, this.userId);
                    await this.loadChatRooms();
                } catch (error) {
                    console.error("Error assigning chat:", error);
                }
            }

            async closeChat() {
                if (!this.currentChatRoomId) return;
                
                try {
                    const response = await fetch('/Admin/Chat?handler=CloseChat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ chatRoomId: this.currentChatRoomId })
                    });

                    if (response.ok) {
                        await this.loadChatRooms();
                        this.currentChatRoomId = null;
                        document.getElementById('noChatSelected').style.display = 'flex';
                        document.getElementById('chatArea').style.display = 'none';
                        document.getElementById('chatHeader').style.display = 'none';
                    }
                } catch (error) {
                    console.error("Error closing chat:", error);
                }
            }

            showTypingIndicator(show) {
                const indicator = document.getElementById('typingIndicator');
                indicator.style.display = show ? 'block' : 'none';
                if (show) {
                    this.scrollToBottom();
                }
            }

            playNotificationSound() {
                const audio = document.getElementById('notificationSound');
                audio.play().catch(() => {
                    // Ignore errors if audio can't play
                });
            }

            formatTime(dateString) {
                const date = new Date(dateString);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);
                
                if (diffMins < 1) return 'Just now';
                if (diffMins < 60) return `${diffMins}m ago`;
                if (diffMins < 1440) return `${Math.floor(diffMins / 60)}h ago`;
                return date.toLocaleDateString();
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            scrollToBottom() {
                const container = document.getElementById('messagesContainer');
                container.scrollTop = container.scrollHeight;
            }
        }

        // Initialize staff chat when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new StaffChat();
        });
    </script>
}
