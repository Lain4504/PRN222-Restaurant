@page "/preordermenu"
@model PRN222_Restaurant.Pages.PreOrderMenuModel
@{
    ViewData["Title"] = "Order Details";
}

@* Add anti-forgery token for AJAX requests *@
@Html.AntiForgeryToken()

<div class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
        <h1 class="text-3xl font-bold text-center mb-8">Your Order Details</h1>

        @if (!string.IsNullOrEmpty(Model.StatusMessage))
        {
            <div class="alert alert-warning mb-6">
                @Model.StatusMessage
            </div>
        }

        @if (Model.CurrentOrder != null)
        {
            <!-- Order Summary -->
            <div class="bg-base-200 p-6 rounded-lg mb-8">
                <h2 class="text-xl font-semibold mb-4">Reservation Details</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <p><span class="font-medium">Date:</span> @Model.CurrentOrder.ReservationTime?.ToString("MMMM dd, yyyy")</p>
                        <p><span class="font-medium">Time:</span> @Model.CurrentOrder.ReservationTime?.ToString("HH:mm")</p>
                    </div>
                    <div>
                        <p><span class="font-medium">Table:</span> @Model.CurrentOrder.Table?.TableNumber</p>
                        <p><span class="font-medium">Guests:</span> @Model.CurrentOrder.NumberOfGuests</p>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.CurrentOrder.Note))
                {
                    <div class="mt-4">
                        <p><span class="font-medium">Note:</span> @Model.CurrentOrder.Note</p>
                    </div>
                }
            </div>

            <!-- Order Items -->
            <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                <h2 class="text-xl font-semibold mb-4">Order Items</h2>

                @if (Model.CurrentOrder.OrderItems.Any())
                {
                    <div class="space-y-4">
                        @foreach (var orderItem in Model.CurrentOrder.OrderItems)
                        {
                            <div class="card bg-base-100 shadow-md border">
                                <div class="card-body p-4">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-4 flex-1">
                                            <img src="@orderItem.MenuItem.ImageUrl" alt="@orderItem.MenuItem.Name" class="w-16 h-16 object-cover rounded-lg" />
                                            <div class="flex-1">
                                                <h3 class="font-semibold text-base-content">@orderItem.MenuItem.Name</h3>

                                                <!-- Description with expand/collapse -->
                                                <div class="description-container mb-2">
                                                    <p class="text-base-content/70 text-sm description-text" data-full-text="@orderItem.MenuItem.Description">
                                                        @(orderItem.MenuItem.Description.Length > 60 ? orderItem.MenuItem.Description.Substring(0, 60) + "..." : orderItem.MenuItem.Description)
                                                    </p>
                                                    @if (orderItem.MenuItem.Description.Length > 60)
                                                    {
                                                        <button class="btn btn-ghost btn-xs text-primary expand-btn mt-1" onclick="toggleOrderDescription(this, '@orderItem.MenuItem.Name')">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                            </svg>
                                                            Xem th√™m
                                                        </button>
                                                    }
                                                </div>

                                                <p class="text-primary font-bold">@orderItem.UnitPrice.ToString("N0") VNƒê m·ªói m√≥n</p>
                                            </div>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-lg font-semibold text-base-content">SL: @orderItem.Quantity</p>
                                            <p class="text-xl font-bold text-primary">@((orderItem.UnitPrice * orderItem.Quantity).ToString("N0")) VNƒê</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-gray-500 text-center py-8">No items in your order yet.</p>
                    <div class="text-center">
                        <a href="/reservation" class="btn btn-primary">Go back to add items</a>
                    </div>
                }
            </div>



            <!-- Order Summary -->
            <div class="card bg-primary text-primary-content shadow-xl mb-8">
                <div class="card-body">
                    <!-- Mobile Layout -->
                    <div class="block lg:hidden">
                        <div class="text-center mb-4">
                            <h3 class="text-lg font-semibold">T·ªïng s·ªë m√≥n: @Model.TotalItems</h3>
                            <h3 class="text-xl font-bold">T·ªïng c·ªông: @Model.FinalTotal.ToString("N0") VNƒê</h3>
                        </div>

                        <div class="bg-warning text-warning-content p-4 rounded-lg mb-4">
                            <p class="text-sm font-medium">üí≥ Thanh to√°n tr∆∞·ªõc (C·ªçc 20%)</p>
                            <p class="text-lg font-bold">@((Model.FinalTotal * 0.2m).ToString("N0")) VNƒê</p>
                            <p class="text-xs">C√≤n l·∫°i: @((Model.FinalTotal * 0.8m).ToString("N0")) VNƒê (thanh to√°n t·∫°i qu·∫ßy)</p>
                        </div>

                        <div class="flex flex-col gap-3">
                            <button onclick="openEditOrderModal()" class="btn btn-outline btn-block">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                                Ch·ªânh s·ª≠a ƒë∆°n h√†ng
                            </button>
                            <form method="post" class="w-full">
                                <button type="submit" class="btn btn-secondary btn-block" @(Model.TotalItems == 0 ? "disabled" : "")>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                    Thanh to√°n c·ªçc ngay
                                </button>
                            </form>
                        </div>
                    </div>

                    <!-- Desktop Layout -->
                    <div class="hidden lg:flex justify-between items-center">
                        <div>
                            <h3 class="text-lg font-semibold">T·ªïng s·ªë m√≥n: @Model.TotalItems</h3>
                            <h3 class="text-2xl font-bold border-t border-primary-content/20 pt-2 mt-2">
                                T·ªïng c·ªông: @Model.FinalTotal.ToString("N0") VNƒê
                            </h3>
                            <div class="mt-3 p-3 bg-warning text-warning-content rounded-lg">
                                <p class="text-sm font-medium">üí≥ Thanh to√°n tr∆∞·ªõc (C·ªçc 20%)</p>
                                <p class="text-lg font-bold">@((Model.FinalTotal * 0.2m).ToString("N0")) VNƒê</p>
                                <p class="text-xs">S·ªë ti·ªÅn c√≤n l·∫°i s·∫Ω thanh to√°n t·∫°i nh√† h√†ng: @((Model.FinalTotal * 0.8m).ToString("N0")) VNƒê</p>
                            </div>
                        </div>
                        <div class="flex gap-4">
                            <button onclick="openEditOrderModal()" class="btn btn-outline btn-lg">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                                Ch·ªânh s·ª≠a ƒë∆°n h√†ng
                            </button>
                            <form method="post" class="contents">
                                <button type="submit" class="btn btn-secondary btn-lg" @(Model.TotalItems == 0 ? "disabled" : "")>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                    Thanh to√°n c·ªçc ngay
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <p class="text-gray-500 mb-4">Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.</p>
                <a href="/reservation" class="btn btn-primary">T·∫°o ƒë·∫∑t b√†n m·ªõi</a>
            </div>
        }
    </div>
</div>

<!-- Edit Order Modal -->
<div id="editOrderModal" class="modal">
    <div class="modal-box max-w-4xl">
        <h3 class="font-bold text-lg mb-4">Ch·ªânh s·ª≠a ƒë∆°n h√†ng</h3>

        <!-- Table Selection -->
        <div class="mb-6">
            <label class="label">
                <span class="label-text font-semibold">Ch·ªçn b√†n:</span>
            </label>
            <select id="tableSelect" class="select select-bordered w-full">
                <option value="">ƒêang t·∫£i...</option>
            </select>
        </div>

        <!-- Menu Items -->
        <div class="mb-6">
            <label class="label">
                <span class="label-text font-semibold">Ch·ªçn m√≥n ƒÉn:</span>
            </label>
            <div id="menuItemsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto">
                <!-- Menu items will be loaded here -->
            </div>
        </div>

        <div class="modal-action">
            <button class="btn btn-primary" onclick="saveOrderChanges()">L∆∞u thay ƒë·ªïi</button>
            <button class="btn" onclick="closeEditOrderModal()">H·ªßy</button>
        </div>
    </div>
    <div class="modal-backdrop" onclick="closeEditOrderModal()"></div>
</div>

<!-- Description Expand Modal -->
<div id="orderDescriptionModal" class="modal">
    <div class="modal-box max-w-md">
        <h3 class="font-bold text-lg mb-4" id="orderModalTitle">M√¥ t·∫£ m√≥n ƒÉn</h3>
        <div class="max-h-60 overflow-y-auto">
            <p id="orderModalDescription" class="text-base-content/80 leading-relaxed"></p>
        </div>
        <div class="modal-action">
            <button class="btn btn-primary" onclick="closeOrderDescriptionModal()">ƒê√≥ng</button>
        </div>
    </div>
    <div class="modal-backdrop" onclick="closeOrderDescriptionModal()"></div>
</div>

<script>
function toggleOrderDescription(button, itemName) {
    const container = button.closest('.description-container');
    const textElement = container.querySelector('.description-text');
    const fullText = textElement.getAttribute('data-full-text');

    // Show in modal for better UX
    document.getElementById('orderModalTitle').textContent = itemName;
    document.getElementById('orderModalDescription').textContent = fullText;
    document.getElementById('orderDescriptionModal').classList.add('modal-open');
}

function closeOrderDescriptionModal() {
    document.getElementById('orderDescriptionModal').classList.remove('modal-open');
}

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeOrderDescriptionModal();
        closeEditOrderModal();
    }
});

// Edit Order Modal Functions
let currentOrderData = {};

async function openEditOrderModal() {
    document.getElementById('editOrderModal').classList.add('modal-open');
    await loadTablesAndMenuItems();
    await loadCurrentOrderData();
}

function closeEditOrderModal() {
    document.getElementById('editOrderModal').classList.remove('modal-open');
}

async function loadTablesAndMenuItems() {
    try {
        // Load tables from Reservation page handler
        const tablesResponse = await fetch('/Reservation?handler=Tables');
        const tables = await tablesResponse.json();

        const tableSelect = document.getElementById('tableSelect');
        tableSelect.innerHTML = '<option value="">Ch·ªçn b√†n</option>';

        tables.forEach(table => {
            const option = document.createElement('option');
            option.value = table.id;
            option.textContent = `B√†n ${table.tableNumber} (${table.capacity} ch·ªó)`;
            // Allow selecting current table even if it's not available
            if (table.status !== 'Available' && table.id !== @(Model.CurrentOrder?.TableId ?? 0)) {
                option.disabled = true;
                option.textContent += ' - ƒê√£ ƒë·∫∑t';
            }
            tableSelect.appendChild(option);
        });

        // Load menu items from Reservation page handler
        const menuResponse = await fetch('/Reservation?handler=MenuItems');
        const menuItems = await menuResponse.json();

        const container = document.getElementById('menuItemsContainer');
        container.innerHTML = '';

        menuItems.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.className = 'card bg-base-100 border border-base-300';
            itemDiv.innerHTML = `
                <div class="card-body p-4">
                    <div class="flex items-center space-x-3">
                        <img src="${item.imageUrl}" alt="${item.name}" class="w-16 h-16 object-cover rounded">
                        <div class="flex-1">
                            <h4 class="font-semibold text-sm">${item.name}</h4>
                            <p class="text-primary font-bold">${item.price.toLocaleString('vi-VN')} VNƒê</p>
                            <div class="flex items-center mt-2">
                                <button class="btn btn-xs btn-circle btn-outline" onclick="changeQuantity(${item.id}, -1)">-</button>
                                <span class="mx-2 font-semibold" id="qty-${item.id}">0</span>
                                <button class="btn btn-xs btn-circle btn-outline" onclick="changeQuantity(${item.id}, 1)">+</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.appendChild(itemDiv);
        });

    } catch (error) {
        console.error('Error loading data:', error);
    }
}

function changeQuantity(itemId, change) {
    const qtyElement = document.getElementById(`qty-${itemId}`);
    let currentQty = parseInt(qtyElement.textContent);
    currentQty = Math.max(0, currentQty + change);
    qtyElement.textContent = currentQty;

    // Store in currentOrderData
    if (currentQty > 0) {
        currentOrderData[itemId] = currentQty;
    } else {
        delete currentOrderData[itemId];
    }
}

async function saveOrderChanges() {
    const tableId = document.getElementById('tableSelect').value;

    if (!tableId) {
        alert('Vui l√≤ng ch·ªçn b√†n');
        return;
    }

    if (Object.keys(currentOrderData).length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n ƒÉn');
        return;
    }

    try {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const response = await fetch('/PreOrderMenu?handler=UpdateOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                tableId: parseInt(tableId),
                menuItems: currentOrderData
            })
        });

        const result = await response.json();
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng');
        }
    } catch (error) {
        console.error('Error saving order:', error);
        alert('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng');
    }
}

async function loadCurrentOrderData() {
    try {
        // Set current table
        const currentTableId = @(Model.CurrentOrder?.TableId ?? 0);
        if (currentTableId > 0) {
            document.getElementById('tableSelect').value = currentTableId;
        }

        // Reset currentOrderData and load current order items
        currentOrderData = {};

        @if (Model.CurrentOrder?.OrderItems != null)
        {
            @foreach (var item in Model.CurrentOrder.OrderItems)
            {
                <text>
                // Set quantity for menu item @item.MenuItemId
                const qtyElement@(item.MenuItemId) = document.getElementById('qty-@item.MenuItemId');
                if (qtyElement@(item.MenuItemId)) {
                    qtyElement@(item.MenuItemId).textContent = '@item.Quantity';
                    currentOrderData[@item.MenuItemId] = @item.Quantity;
                }
                </text>
            }
        }
    } catch (error) {
        console.error('Error loading current order data:', error);
    }
}
</script>