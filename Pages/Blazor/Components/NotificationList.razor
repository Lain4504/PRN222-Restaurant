@using Microsoft.AspNetCore.SignalR.Client
@using PRN222_Restaurant.Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="notification-sidebar">
    <h3 class="text-lg font-semibold mb-4">Notifications</h3>
    <div class="notification-list">
        @foreach (var notification in notifications)
        {
            <div class="notification-item mb-3 p-3 bg-white rounded shadow-sm">
                <p class="text-sm text-gray-600">@notification.Message</p>
                <div class="text-xs text-gray-500 mt-1">
                    <span>Disk: @notification.Disk.Name</span>
                    <span class="ml-2">Price: $@notification.Disk.Price</span>
                </div>
                <div class="text-xs text-gray-400 mt-1">
                    @notification.Timestamp.ToString("HH:mm:ss")
                </div>
            </div>
        }
    </div>
</div>

<style>
    .notification-sidebar {
        position: fixed;
        right: 0;
        top: 0;
        width: 300px;
        height: 100vh;
        background-color: #f8f9fa;
        padding: 1rem;
        border-left: 1px solid #dee2e6;
        overflow-y: auto;
    }

    .notification-item {
        transition: all 0.3s ease;
    }

    .notification-item:hover {
        transform: translateX(-5px);
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<NotificationItem> notifications = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/diskhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, Disk>("ReceiveDiskNotification", (message, disk) =>
        {
            var notification = new NotificationItem
            {
                Message = message,
                Disk = disk,
                Timestamp = DateTime.Now
            };
            
            notifications.Insert(0, notification);
            if (notifications.Count > 10) notifications.RemoveAt(notifications.Count - 1);
            
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private class NotificationItem
    {
        public string Message { get; set; } = "";
        public Disk Disk { get; set; } = null!;
        public DateTime Timestamp { get; set; }
    }
} 