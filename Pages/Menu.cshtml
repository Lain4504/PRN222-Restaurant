@page "/menu"
@model PRN222_Restaurant.Pages.MenuModel
@{
    ViewData["Title"] = "Thực đơn";
}

<!-- Hero Section -->
<section class="relative py-16 md:py-24">
    <div class="absolute inset-0 z-0">
        <img src="https://images.unsplash.com/photo-1551218808-94e220e084d2?q=80&w=2070" class="w-full h-full object-cover" />
        <div class="absolute inset-0 bg-gradient-to-b from-slate-900/80 to-slate-900/80"></div>
    </div>
    <div class="container mx-auto px-4 relative z-10 text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">Thực đơn của chúng tôi</h1>
        <p class="text-xl text-slate-200 max-w-3xl mx-auto">Khám phá những món hải sản tươi ngon của chúng tôi</p>
    </div>
</section>

<!-- Filter Form -->
<section class="bg-base-100 py-8 sticky top-0 z-30 shadow-md border-b border-base-300">
    <div class="container mx-auto px-4">
        <form method="get" class="flex flex-col md:flex-row gap-4 items-center">
            <select name="CategoryId" class="select select-bordered">
                <option value="">Tất cả danh mục</option>
                @foreach (var c in Model.Categories)
                {
                    <option value="@c.Id" selected="@(Model.CategoryId == c.Id ? "selected" : null)">@c.Name</option>
                }
            </select>

            <select name="Status" class="select select-bordered">
                <option value="">Tất cả trạng thái</option>
                @foreach (var s in Model.MenuStatusDisplayNames)
                {
                    <option value="@s.Key" selected="@(Model.Status == s.Key ? "selected" : null)">@s.Value</option>
                }
            </select>

            <input name="SearchTerm" type="text" placeholder="Tìm món..." value="@Model.SearchTerm" class="input input-bordered" />
            <input name="MinPrice" type="number" placeholder="Giá từ" value="@Model.MinPrice" class="input input-bordered" />
            <input name="MaxPrice" type="number" placeholder="Giá đến" value="@Model.MaxPrice" class="input input-bordered" />

            <button type="submit" class="btn btn-primary">Lọc</button>
        </form>
    </div>
</section>

<!-- Menu Items -->
<section class="py-12 bg-base-200">
    <div class="container mx-auto px-4">
        @if (Model.MenuItems.Count == 0)
        {
            <div class="text-center text-base-content/60 py-8 text-lg font-semibold">Không tìm thấy kết quả phù hợp</div>
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var item in Model.MenuItems)
                {
                    <div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300">
                        <figure class="h-48 overflow-hidden">
                            <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-full object-cover hover:scale-105 transition-transform duration-300" />
                        </figure>
                        <div class="card-body p-4">
                            <h3 class="card-title text-lg text-base-content mb-2">@item.Name</h3>

                            <!-- Description with expand/collapse -->
                            <div class="description-container mb-3">
                                <p class="text-base-content/70 text-sm description-text" data-full-text="@item.Description">
                                    @(item.Description.Length > 80 ? item.Description.Substring(0, 80) + "..." : item.Description)
                                </p>
                                @if (item.Description.Length > 80)
                                {
                                    <button class="btn btn-ghost btn-xs text-primary expand-btn mt-1" onclick="toggleDescription(this)">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                        </svg>
                                        Xem thêm
                                    </button>
                                }
                            </div>

                            <div class="flex justify-between items-center">
                                <span class="text-lg font-bold text-primary">@item.Price.ToString("N0") VNĐ</span>
                                <span class="badge text-xs font-semibold px-3 py-1 @(item.Status == Models.MenuItemStatus.Available ? "badge-success" : "badge-error")">
                                    @(item.Status == Models.MenuItemStatus.Available ? "Còn món" : "Hết món")
                                </span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            <div class="flex justify-center mt-8 gap-2">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <a href="@Url.Page("/Menu", null, new {
                        CurrentPage = i,
                        CategoryId = Model.CategoryId,
                        Status = Model.Status,
                        SearchTerm = Model.SearchTerm,
                        MinPrice = Model.MinPrice,
                        MaxPrice = Model.MaxPrice
                }, null)"
                       class="btn @(i == Model.CurrentPage ? "btn-primary" : "btn-neutral")">
                        @i
                    </a>
                }
            </div>
        }
    </div>
</section>

<!-- Description Expand Modal -->
<div id="descriptionModal" class="modal">
    <div class="modal-box max-w-md">
        <h3 class="font-bold text-lg mb-4" id="modalTitle">Mô tả món ăn</h3>
        <div class="max-h-60 overflow-y-auto">
            <p id="modalDescription" class="text-base-content/80 leading-relaxed"></p>
        </div>
        <div class="modal-action">
            <button class="btn btn-primary" onclick="closeDescriptionModal()">Đóng</button>
        </div>
    </div>
    <div class="modal-backdrop" onclick="closeDescriptionModal()"></div>
</div>

<script>
function toggleDescription(button) {
    const container = button.closest('.description-container');
    const textElement = container.querySelector('.description-text');
    const fullText = textElement.getAttribute('data-full-text');
    const isExpanded = button.classList.contains('expanded');

    if (isExpanded) {
        // Collapse
        const truncatedText = fullText.length > 80 ? fullText.substring(0, 80) + '...' : fullText;
        textElement.textContent = truncatedText;
        button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Xem thêm
        `;
        button.classList.remove('expanded');
    } else {
        // Show in modal for better UX
        const cardTitle = button.closest('.card').querySelector('.card-title').textContent;
        document.getElementById('modalTitle').textContent = cardTitle;
        document.getElementById('modalDescription').textContent = fullText;
        document.getElementById('descriptionModal').classList.add('modal-open');
    }
}

function closeDescriptionModal() {
    document.getElementById('descriptionModal').classList.remove('modal-open');
}

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeDescriptionModal();
    }
});
</script>
