@page
@model PRN222_Restaurant.Pages.Chat.IndexModel
@{
    ViewData["Title"] = "Customer Support Chat";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container-fluid h-screen flex flex-col">
    <div class="bg-white shadow-sm border-b p-4">
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                    <i class="fas fa-headset text-white"></i>
                </div>
                <div>
                    <h1 class="text-xl font-semibold text-gray-900">Customer Support</h1>
                    <p class="text-sm text-gray-500" id="connectionStatus">Connecting...</p>
                </div>
            </div>
            <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-500" id="onlineStatus"></span>
                <div class="w-3 h-3 bg-green-500 rounded-full" id="onlineIndicator" style="display: none;"></div>
            </div>
        </div>
    </div>

    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Chat Messages Area -->
        <div class="flex-1 overflow-y-auto p-4 space-y-4" id="messagesContainer">
            <div class="text-center text-gray-500 py-8">
                <i class="fas fa-comments text-4xl mb-4"></i>
                <p>Welcome to customer support! How can we help you today?</p>
            </div>
        </div>

        <!-- Typing Indicator -->
        <div class="px-4 py-2" id="typingIndicator" style="display: none;">
            <div class="flex items-center space-x-2 text-gray-500">
                <div class="flex space-x-1">
                    <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s;"></div>
                    <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s;"></div>
                </div>
                <span class="text-sm">Support is typing...</span>
            </div>
        </div>

        <!-- Message Input Area -->
        <div class="border-t bg-white p-4">
            <div class="flex items-center space-x-3">
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" 
                               id="messageInput" 
                               placeholder="Type your message..." 
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               maxlength="1000">
                        <div class="absolute right-3 top-3 text-gray-400">
                            <span id="charCount">0</span>/1000
                        </div>
                    </div>
                </div>
                <button id="sendButton" 
                        class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled>
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
            <div class="mt-2 text-xs text-gray-500">
                Press Enter to send â€¢ Shift+Enter for new line
            </div>
        </div>
    </div>
</div>

<!-- Connection Status Modal -->
<div id="connectionModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
    <div class="bg-white rounded-lg p-6 max-w-sm mx-4">
        <div class="text-center">
            <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-exclamation-triangle text-red-500 text-2xl"></i>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Connection Lost</h3>
            <p class="text-gray-600 mb-4">We're trying to reconnect you to the chat...</p>
            <div class="flex justify-center">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        class CustomerChat {
            constructor() {
                this.connection = null;
                this.chatRoomId = null;
                this.userId = @Model.UserId;
                this.isTyping = false;
                this.typingTimeout = null;
                this.init();
            }

            async init() {
                await this.setupSignalR();
                this.setupEventListeners();
                await this.initializeChat();
            }

            async setupSignalR() {
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .build();

                // Connection events
                this.connection.onreconnecting(() => {
                    this.updateConnectionStatus("Reconnecting...", false);
                    document.getElementById('connectionModal').style.display = 'flex';
                });

                this.connection.onreconnected(() => {
                    this.updateConnectionStatus("Connected", true);
                    document.getElementById('connectionModal').style.display = 'none';
                    if (this.chatRoomId) {
                        this.connection.invoke("JoinChatRoom", this.chatRoomId);
                    }
                });

                this.connection.onclose(() => {
                    this.updateConnectionStatus("Disconnected", false);
                    document.getElementById('connectionModal').style.display = 'flex';
                });

                // Message events
                this.connection.on("ReceiveMessage", (message) => {
                    this.displayMessage(message);
                });

                this.connection.on("UserTyping", (userId, isTyping) => {
                    if (userId !== this.userId) {
                        this.showTypingIndicator(isTyping);
                    }
                });

                this.connection.on("StaffAssigned", (staffId) => {
                    this.displaySystemMessage("A support agent has joined the conversation");
                });

                this.connection.on("Error", (error) => {
                    this.showError(error);
                });

                try {
                    await this.connection.start();
                    this.updateConnectionStatus("Connected", true);
                } catch (err) {
                    console.error("SignalR connection failed:", err);
                    this.updateConnectionStatus("Connection Failed", false);
                }
            }

            setupEventListeners() {
                const messageInput = document.getElementById('messageInput');
                const sendButton = document.getElementById('sendButton');

                messageInput.addEventListener('input', (e) => {
                    const message = e.target.value.trim();
                    sendButton.disabled = !message;
                    
                    // Update character count
                    document.getElementById('charCount').textContent = e.target.value.length;
                    
                    // Handle typing indicator
                    if (message && !this.isTyping) {
                        this.isTyping = true;
                        this.connection.invoke("StartTyping", this.chatRoomId);
                    }
                    
                    clearTimeout(this.typingTimeout);
                    this.typingTimeout = setTimeout(() => {
                        if (this.isTyping) {
                            this.isTyping = false;
                            this.connection.invoke("StopTyping", this.chatRoomId);
                        }
                    }, 1000);
                });

                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.sendMessage();
                    }
                });

                sendButton.addEventListener('click', () => {
                    this.sendMessage();
                });
            }

            async initializeChat() {
                try {
                    const response = await fetch('/Chat?handler=GetOrCreateChatRoom', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        this.chatRoomId = data.chatRoomId;
                        await this.connection.invoke("JoinChatRoom", this.chatRoomId);
                        await this.loadMessages();
                    } else {
                        this.showError("Failed to initialize chat");
                    }
                } catch (error) {
                    console.error("Error initializing chat:", error);
                    this.showError("Failed to initialize chat");
                }
            }

            async loadMessages() {
                try {
                    const response = await fetch(`/Chat?handler=GetMessages&chatRoomId=${this.chatRoomId}`);
                    if (response.ok) {
                        const messages = await response.json();
                        const container = document.getElementById('messagesContainer');
                        container.innerHTML = '';
                        
                        messages.forEach(message => {
                            this.displayMessage(message, false);
                        });
                        
                        this.scrollToBottom();
                    }
                } catch (error) {
                    console.error("Error loading messages:", error);
                }
            }

            sendMessage() {
                const messageInput = document.getElementById('messageInput');
                const message = messageInput.value.trim();
                
                if (!message || !this.chatRoomId) return;

                this.connection.invoke("SendMessage", this.chatRoomId, message)
                    .catch(err => {
                        console.error("Error sending message:", err);
                        this.showError("Failed to send message");
                    });

                messageInput.value = '';
                document.getElementById('sendButton').disabled = true;
                document.getElementById('charCount').textContent = '0';
                
                if (this.isTyping) {
                    this.isTyping = false;
                    this.connection.invoke("StopTyping", this.chatRoomId);
                }
            }

            displayMessage(message, animate = true) {
                const container = document.getElementById('messagesContainer');
                const isOwnMessage = message.senderId === this.userId;
                const isSystemMessage = message.messageType === 'System';
                
                const messageDiv = document.createElement('div');
                messageDiv.className = `flex ${isOwnMessage ? 'justify-end' : 'justify-start'} ${animate ? 'opacity-0' : ''}`;
                
                if (isSystemMessage) {
                    messageDiv.innerHTML = `
                        <div class="text-center text-gray-500 text-sm py-2">
                            <i class="fas fa-info-circle mr-1"></i>
                            ${message.content}
                        </div>
                    `;
                } else {
                    messageDiv.innerHTML = `
                        <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            isOwnMessage 
                                ? 'bg-blue-500 text-white' 
                                : 'bg-gray-200 text-gray-900'
                        }">
                            <div class="text-sm">${this.escapeHtml(message.content)}</div>
                            <div class="text-xs mt-1 ${isOwnMessage ? 'text-blue-100' : 'text-gray-500'}">
                                ${new Date(message.sentAt).toLocaleTimeString()}
                            </div>
                        </div>
                    `;
                }
                
                container.appendChild(messageDiv);
                
                if (animate) {
                    setTimeout(() => {
                        messageDiv.classList.remove('opacity-0');
                        messageDiv.classList.add('opacity-100', 'transition-opacity', 'duration-300');
                    }, 50);
                }
                
                this.scrollToBottom();
            }

            displaySystemMessage(content) {
                this.displayMessage({
                    content: content,
                    messageType: 'System',
                    sentAt: new Date().toISOString()
                });
            }

            showTypingIndicator(show) {
                const indicator = document.getElementById('typingIndicator');
                indicator.style.display = show ? 'block' : 'none';
                if (show) {
                    this.scrollToBottom();
                }
            }

            updateConnectionStatus(status, isConnected) {
                document.getElementById('connectionStatus').textContent = status;
                const indicator = document.getElementById('onlineIndicator');
                const statusText = document.getElementById('onlineStatus');
                
                if (isConnected) {
                    indicator.style.display = 'block';
                    indicator.className = 'w-3 h-3 bg-green-500 rounded-full';
                    statusText.textContent = 'Online';
                } else {
                    indicator.style.display = 'block';
                    indicator.className = 'w-3 h-3 bg-red-500 rounded-full';
                    statusText.textContent = 'Offline';
                }
            }

            showError(message) {
                // You can implement a toast notification here
                console.error("Chat error:", message);
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            scrollToBottom() {
                const container = document.getElementById('messagesContainer');
                container.scrollTop = container.scrollHeight;
            }
        }

        // Initialize chat when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new CustomerChat();
        });
    </script>
}
